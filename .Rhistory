curSamples = samples[match(names(countMatrix), samples$ID),];
y = DGEList(counts=countMatrix, group=curSamples$treatment)
y = normOffsets(y)
View(y)
curSamples = samples[match(names(countMatrix), samples$ID),];
z = DGEList(counts=countMatrix, group=curSamples$treatment)
z = normOffsets(z)
designPaired1 = model.matrix(~curSamples$treatment + curSamples$timeName)
z = estimateDisp(z, designPaired1)
fitPaired1 = glmQLFit(z, designPaired1)
qlfPairedTime6vs241 = glmQLFTest(fitPaired1, coef=3)
qlfPairedTreatControlvsProtac1 = glmQLFTest(fitPaired1, coef=2)
allDEStatsPairedTreatControlvsProtacLoess = as.data.frame(topTags(qlfPairedTreatControlvsProtac1,n=nrow(countMatrix)))
allDEStatsPairedTreatControlvsProtacLoess$region=row.names(allDEStatsPairedTreatControlvsProtacLoess)
allDEStatsPairedTime6vs24Loess = as.data.frame(topTags(qlfPairedTime6vs241,n=nrow(countMatrix)))
allDEStatsPairedTime6vs24Loess$region=row.names(allDEStatsPairedTime6vs241)
allDEStatsPairedTime6vs24Loess$region=row.names(allDEStatsPairedTime6vs24Loess)
curSamples = samples[match(names(countMatrix), samples$ID),];
z = DGEList(counts=countMatrix, group=curSamples$treatment)
z = normOffsets(z)
designPaired1 = model.matrix(~curSamples$treatment + curSamples$timeName)
z = estimateDisp(z, designPaired1)
fitPaired1 = glmQLFit(z, designPaired1)
qlfPairedTime6vs241 = glmQLFTest(fitPaired1, coef=3)
qlfPairedTreatControlvsProtac1 = glmQLFTest(fitPaired1, coef=2)
allDEStatsPairedTreatControlvsProtacLoess = as.data.frame(topTags(qlfPairedTreatControlvsProtac1,n=nrow(countMatrix)))
allDEStatsPairedTreatControlvsProtacLoess$region=row.names(allDEStatsPairedTreatControlvsProtacLoess)
allDEStatsPairedTime6vs24Loess = as.data.frame(topTags(qlfPairedTime6vs241,n=nrow(countMatrix)))
allDEStatsPairedTime6vs24Loess$region=row.names(allDEStatsPairedTime6vs24Loess)
ggplot(data = allDEStatsPairedTreatControlvsProtacLoess, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTime6vs24Loess, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTreatControlvsProtacLoess, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
library(GenomicRanges)
library(stringr)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
View(chr_start_end)
chr_start_end <- str_split_fixed(chr_start_end, "-", 2)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end <- str_split_fixed(chr_start_end, "-", 3)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end <- str_split_fixed(chr_start_end[,2], "-", 2)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end <- str_split_fixed(chr_start_end[,2], "-", 3)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end_1 <- str_split_fixed(chr_start_end[,2], "-", 2)
chr_start_end <- rownames(countMatrix)
chr_start_end <- str_split_fixed(chr_start_end, ":", 2)
chr_start_end_1 <- str_split_fixed(chr_start_end[,2], "-", 2)
View(chr_start_end)
View(chr_start_end_1)
chr_start_end <- cbind(chr_start_end[,-2], chr_start_end_1)
gr1 <- GRanges(seqnames=Rle(chr_start_end[,1]), ranges=IRanges(start = chr_start_end[,2] , end = chr_start_end[,3]), strand=NULL)
gr1 <- GRanges(seqnames=Rle(as.list(chr_start_end[,1])), ranges=IRanges(start = (as.list(chr_start_end[,2])), end = (as.list(chr_start_end[,3])), strand=NULL)
gr1 <- GRanges(seqnames=Rle(as.list(chr_start_end[,1])), ranges=IRanges(start = (as.list(chr_start_end[,2])), end = (as.list(chr_start_end[,3])), strand=NULL))
gr1 <- GRanges(seqnames=Rle(as.list(chr_start_end[,1])), ranges=IRanges(start = (as.list(chr_start_end[,2])), end = (as.list(chr_start_end[,3])), strand=NULL)
GRanges(seqnames=Rle(as.list(chr_start_end[,1])), ranges=IRanges(start = (as.list(chr_start_end[,2])), end = (as.list(chr_start_end[,3])), strand=NULL)
gr1 <- GRanges(seqnames=Rle(as.list(chr_start_end[,1])), ranges=IRanges(start = (as.list(chr_start_end[,2])), end = (as.list(chr_start_end[,3])), strand=NULL)
gr1
class(chr_start_end)
class(chr_start_end[,1])
class(chr_start_end[,2])
r1 <- GRanges(seqnames=Rle(as.list(chr_start_end[,1])), ranges=IRanges(start = (as.list(chr_start_end[,2])), end = (as.list(chr_start_end[,3])), strand=NULL)
gr1 <-makeGRangesFromDataFrame(chr_start_end, seqnames.field = "V1", start.field = "V2", end.field = "V3")
gr1 <-makeGRangesFromDataFrame(chr_start_end, seqnames.field = "V1", start.field = "V2", end.field = "V3")
chr_start_end <- data.frame(chr_start_end)
gr1 <-makeGRangesFromDataFrame(chr_start_end, seqnames.field = "X1", start.field = "X2", end.field = "X3")
gr1
gr1
gr1 <-makeGRangesFromDataFrame(chr_start_end, seqnames.field = "X1", start.field = "X2", end.field = "X3")
gr1
gr1 <-makeGRangesFromDataFrame(chr_start_end, seqnames.field = "X1", start.field = "X2", end.field = "X3", strand.field = NULL)
chr_start_end <- data.frame(chr_start_end)
gr1 <-makeGRangesFromDataFrame(chr_start_end, seqnames.field = "X1", start.field = "X2", end.field = "X3")
gr1
library(BSgenome.Hsapiens.UCSC.hg38)
library(Biostrings)
library(AnnotationHub)
install.packages('BSgenome')
library(BSgenome.Hsapiens.UCSC.hg38)
install.packages(BSgenome.Hsapiens.UCSC.hg38)
library(BSgenome.Hsapiens.UCSC.hg38)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(BSgenome.Hsapiens.UCSC.hg38)
chr_range = GRanges("chr", IRanges(1, seqlengths(Hsapiens)["chr"]))
knitr::opts_chunk$set(echo = TRUE)
library(BSgenome.Hsapiens.UCSC.hg38)
chr_range = GRanges("chr", IRanges(1, seqlengths(Hsapiens)["chr"]))
## Tip: Use the Biostring library
library(Biostrings)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(BSgenome.Hsapiens.UCSC.hg38)
chr_range = GRanges("chr", IRanges(1, seqlengths(Hsapiens)["chr"]))
chr_dna <- getSeq(Hsapiens, gr1$ranges)
bsg <- BSgenome.Hsapiens.UCSC.hg38
getSeq(bsg, names = gr1)
seqs <- getSeq(bsg, names = gr1)
seqs
letterFrequency(seqs, "GC", as.prob=TRUE)
GC_content <- letterFrequency(seqs, "GC", as.prob=TRUE)
View(GC_content)
View(GC_content)
View(CPM_cor)
countMatrix_denoms <- colSums(countMatrix)
View(protac_control)
#please limit the y axis to between 0 and 50
#GC content
GC_content <- letterFrequency(seqs, "GC", as.prob=TRUE)
#Calculate CPMs for countMatrix
countMatrix_denoms <- colSums(countMatrix)
#protac_control_CPMS <- (protac_control[,2:length(protac_control)]*10^6)/protac_control_denoms[1:8]
df1<-data.frame(countMatrix[,1]*10^6/countMatrix_denoms[1])
df1<-data.frame(countMatrix[,2]*10^6/countMatrix_denoms[2])
df2<-data.frame(countMatrix[,3]*10^6/countMatrix_denoms[3])
df3<-data.frame(countMatrix[,4]*10^6/countMatrix_denoms[4])
df4<-data.frame(countMatrix[,5]*10^6/countMatrix_denoms[5])
df5<-data.frame(countMatrix[,6]*10^6/countMatrix_denoms[6])
df6<-data.frame(countMatrix[,7]*10^6/countMatrix_denoms[7])
df7<-data.frame(countMatrix[,8]*10^6/countMatrix_denoms[8])
df1<-data.frame(countMatrix[,1]*10^6/countMatrix_denoms[1])
df1<-data.frame(countMatrix[,2]*10^6/countMatrix_denoms[2])
df2<-data.frame(countMatrix[,3]*10^6/countMatrix_denoms[3])
df3<-data.frame(countMatrix[,4]*10^6/countMatrix_denoms[4])
df4<-data.frame(countMatrix[,5]*10^6/countMatrix_denoms[5])
df5<-data.frame(countMatrix[,6]*10^6/countMatrix_denoms[6])
df6<-data.frame(countMatrix[,7]*10^6/countMatrix_denoms[7])
df7<-data.frame(countMatrix[,8]*10^6/countMatrix_denoms[8])
countMatrix_CPMs <- cbind(df1,df2,df3,df4,df5,df6,df7,df8)
df1<-data.frame(countMatrix[,1]*10^6/countMatrix_denoms[1])
df2<-data.frame(countMatrix[,2]*10^6/countMatrix_denoms[2])
df3<-data.frame(countMatrix[,3]*10^6/countMatrix_denoms[3])
df4<-data.frame(countMatrix[,4]*10^6/countMatrix_denoms[4])
df5<-data.frame(countMatrix[,5]*10^6/countMatrix_denoms[5])
df6<-data.frame(countMatrix[,6]*10^6/countMatrix_denoms[6])
df7<-data.frame(countMatrix[,7]*10^6/countMatrix_denoms[7])
df8<-data.frame(countMatrix[,8]*10^6/countMatrix_denoms[8])
countMatrix_CPMs <- cbind(df1,df2,df3,df4,df5,df6,df7,df8)
View(countMatrix_CPMs)
names(protac_control_CPMs) <- names(countMatrix)
countMatrix_CPMs <- data.frame(countMatrix_CPMs)
names(protac_control_CPMs) <- names(countMatrix)
names(protac_control_CPMs) <- colnames(countMatrix)
names(protac_control_CPMs) <- colnames(countMatrix)
names(protac_control_CPMs) <- c(colnames(countMatrix))
names(countMatrix)
names(protac_control_CPMs) <- c(names(countMatrix))
names(countMatrix)
names(countMatrix_CPMs)
names(countMatrix_CPMs) <- names(countMatrix)
row.names(countMatrix_CPMs) <- row.names(countMatrix)
GC_content <- letterFrequency(seqs, "GC", as.prob=TRUE)
View(GC_content)
GC_content <- data.frame(GC_content)
countMatrix_CPMs_GC <- cbind(GC_content, countMatrix_CPMs)
View(countMatrix_CPMs_GC)
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2:9])) + geom_point() + facet_wrap(vars(names(countMatrix_CPMs_GC))
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2:9])) + geom_point() + facet_wrap(vars(names(countMatrix_CPMs_GC[,2:9]))
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2:9])) + geom_point() + facet_wrap(vars(names(countMatrix_CPMs_GC[,2:9])))
names(countMatrix_CPMs_GC[,2:9]
names(countMatrix_CPMs_GC[,2:9])
names(countMatrix_CPMs_GC[,2:9])
countMatrix_CPMs_GC_melt <- melt(countMatrix_CPMs_GC)
countMatrix_CPMs_GC_melt <- melt(countMatrix_CPMs_GC)
library(reshape)
countMatrix_CPMs_GC_melt <- melt(countMatrix_CPMs_GC)
View(countMatrix_CPMs_GC_melt)
View(countMatrix_CPMs_GC_melt)
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) + geom_point() + stat_smooth()
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) + geom_point() + geom_smooth(method=gam)
library(ggplot2)
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) + geom_point() + geom_smooth(method=gam)
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) + geom_point() + geom_smooth(method="gam")
GC_CPM_plot
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) + xlab("GC content") + ylab("CPM") + ylim(0:50) geom_point() + geom_smooth(method="gam")
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) + xlab("GC content") + ylab("CPM") + ylim(0,50) geom_point() + geom_smooth(method="gam")
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
GC_CPM_plot
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2], size = 1)) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
GC_CPM_plot
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2], size = 0.002)) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
GC_CPM_plot
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point(aes(size = 0.02)) + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
GC_CPM_plot
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point(aes(size = 0.0002)) + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
GC_CPM_plot
GC_CPM_plot <- ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
GC_CPM_plot
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
par(mfrow=c(4,2))
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,4])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,5])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,6])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,7])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,8])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,9])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
par(mfrow=c(4,2))
mtcars
attach(countMatrix_CPMs_GC)
par(mfrow=c(4,2))
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,4])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,5])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,6])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,7])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,8])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,9])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
attach(countMatrix_CPMs_GC)
par(mfrow=c(4,2))
ggplot(aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
attach(countMatrix_CPMs_GC)
par(mfrow=c(4,2))
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot() + geom_density(aes(x=cpm1, color = 'coral'), protac_control_CPMs) + geom_density(aes(x=cpm2, color = '#458B00'), protac_control_CPMs) + geom_density(aes(x=cpm3, color = 'red'), protac_control_CPMs)+ geom_density(aes(x=cpm4, color = 'blue'), protac_control_CPMs)+ geom_density(aes(x=cpm5, color = 'yellow'), protac_control_CPMs)+ geom_density(aes(x=cpm6, color = 'green'), protac_control_CPMs)+ geom_density(aes(x=cpm7, color = 'brown'), protac_control_CPMs)+ geom_density(aes(x=cpm8, color = 'black'), protac_control_CPMs)
ggplot() + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2], color='red')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3], color='blue'))
ggplot() + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2], color='red')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3], color='blue')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,4], color='green')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,5], color='orange')) +  geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,6], color='brown'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,7], color='yellow'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,8], color='purple'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,9], color='pink'))
ggplot() + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2], color='red')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3], color='blue')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,4], color='green')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,5], color='orange')) +  geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,6], color='brown'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,7], color='yellow'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,8], color='purple'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,9], color='pink'))+ xlab("GC content") + ylab("CPM")
View(allDEStatsPairedTime6vs24Loess)
View(allDEStatsPairedTreatControlvsProtacLoess)
GC_logFC <- cbind(allDEStatsPairedTreatControlvsProtacLoess[,1], countMatrix_CPMs_GC[,1])
View(GC_logFC)
View(GC_logFC)
names(GC_logFC ) <- c("logFC", "GC_content")
names(GC_logFC) <- c("logFC", "GC_content")
GC_logFC <- cbind(allDEStatsPairedTreatControlvsProtacLoess[,1], countMatrix_CPMs_GC[,1])
GC_logFC <-data.frame(GC_logFC)
names(GC_logFC) <- c("logFC", "GC_content")
ggplot() + geom_point(aes(x="GC_content", y="logFC")) + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot() + geom_point(data=GC_logFC, aes(x="GC_content", y="logFC")) + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data=GC_logFC) + geom_point(aes(x="GC_content", y="logFC")) + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data=GC_logFC, aes(x="GC_content", y="logFC")) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data=GC_logFC, aes(x=GC_content, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
GC_logFC <- cbind(allDEStatsPairedTreatControlvsProtac[,1], countMatrix_CPMs_GC[,1])
GC_logFC <-data.frame(GC_logFC)
names(GC_logFC) <- c("logFC", "GC_content")
ggplot(data=GC_logFC, aes(x=GC_content, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(RColorBrewer) # for a colourful plot
library(ggrepel) # for nice annotations
View(allDEStatsPairedTreatControlvsProtac)
View(allDEStatsPairedTreatControlvsProtac)
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point()
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point()+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point()+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point()+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue") + scale_color_manual(name = "FDR<0.01")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue") + scale_color_manual(name = "FDR<0.01", labels=c("True", "False"))
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logCPM, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logCPM, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logCPM") + ylab("-log10_PValue")
length(allDEStatsPairedTreatControlvsProtac$FDR<0.01)
View(countMatrix)
View(countMatrix)
length(allDEStatsPairedTreatControlvsProtac$FDR<0.01)
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(color ~ allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(color = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logCPM, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logCPM") + ylab("-log10_PValue")
# find the values corresponding to BR_protac after 6 hours for the peak at chr1:25429953-25431146 .
atacSeqData["chr1:25429953-25431146","R2_6h_BI_protac"]
R1: 140, R2: 275
exp_design_plot <-ggplot(samples, aes(x=timeName, y=treatment)) + geom_point() + facet_grid(.~replicate)
exp_design_plot
exp_design_plot <-ggplot(samples, aes(x=timeName, y=treatment)) + geom_point() + facet_grid(.~replicate)
exp_design_plot
coverage_plot <-ggplot(totalReads, aes(x=samples, y=reads)) + geom_point() + theme_grey(base_size = 5)
coverage_plot
ggplot() + geom_density(aes(x=cpm1, color = 'coral'), protac_control_CPMs) + geom_density(aes(x=cpm2, color = '#458B00'), protac_control_CPMs) + geom_density(aes(x=cpm3, color = 'red'), protac_control_CPMs)+ geom_density(aes(x=cpm4, color = 'blue'), protac_control_CPMs)+ geom_density(aes(x=cpm5, color = 'yellow'), protac_control_CPMs)+ geom_density(aes(x=cpm6, color = 'green'), protac_control_CPMs)+ geom_density(aes(x=cpm7, color = 'brown'), protac_control_CPMs)+ geom_density(aes(x=cpm8, color = 'black'), protac_control_CPMs)
df1<-data.frame(protac_control[,2]*10^6/protac_control_denoms[1])
rotac_control_denoms <- colSums(protac_control[2:length(protac_control)])
#protac_control_CPMS <- (protac_control[,2:length(protac_control)]*10^6)/protac_control_denoms[1:8]
df1<-data.frame(protac_control[,2]*10^6/protac_control_denoms[1])
protac_control_1 <- select(atacSeqData, contains("protac"))
protac_control_2 <- select(atacSeqData, contains("control"))
protac_control <- cbind(atacSeqData[,1], protac_control_1, protac_control_2)
```
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logCPM, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logCPM") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(color = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTime6vs24, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTreatControlvsProtacLoess, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTime6vs24Loess, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTreatControlvsProtacLoess, aes(x=logCPM, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
bsg <- BSgenome.Hsapiens.UCSC.hg38
seqs <- getSeq(bsg, names = gr1)
seqs
ggplot(countMatrix_CPMs_GC, aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2])) +  geom_point() + geom_smooth(method="gam") + xlab("GC content") + ylab("CPM") + ylim(0,50)
ggplot() + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,2], color='red')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,3], color='blue')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,4], color='green')) + geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,5], color='orange')) +  geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,6], color='brown'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,7], color='yellow'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,8], color='purple'))+ geom_smooth(method="gam", aes(x=countMatrix_CPMs_GC$G.C, y=countMatrix_CPMs_GC[,9], color='pink'))+ xlab("GC content") + ylab("CPM")
GC_logFC <- cbind(allDEStatsPairedTreatControlvsProtacLoess[,1], countMatrix_CPMs_GC[,1])
GC_logFC <-data.frame(GC_logFC)
names(GC_logFC) <- c("logFC", "GC_content")
ggplot(data=GC_logFC, aes(x=GC_content, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data=GC_logFC, aes(x=GC_content, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data=GC_logFC, aes(x=GC_content, y=logFC)) + geom_point() + geom_hline(yintercept=0, col="red") + stat_smooth()
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logFC, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(color = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logFC") + ylab("-log10_PValue")
ggplot(data = allDEStatsPairedTreatControlvsProtac, aes(x = allDEStatsPairedTreatControlvsProtac$logCPM, y = -log10(allDEStatsPairedTreatControlvsProtac$PValue))) + geom_point(aes(colour = allDEStatsPairedTreatControlvsProtac$FDR<0.01))+ xlab("logCPM") + ylab("-log10_PValue")
library(readr)
library(dplyr)
counts_data <- read_tsv('GSE213092_HRCRC.txt')
setwd("~/Documents/GitHub/BMEG591E_final_project")
library(readr)
library(dplyr)
counts_data <- read_tsv('GSE213092_HRCRC.txt')
counts_data <- as.data.frame(counts_data)
counts_data <- counts_data %>%
column_to_rownames("Gene")
library(dplyr)
counts_data <- counts_data %>%
column_to_rownames("Gene")
library(tidyverse)
counts_data <- counts_data %>%
column_to_rownames("Gene")
counts_data %>%
mutate_all(as.numeric)
counts_data <- counts_data %>%
mutate_all(as.numeric)
dge_counts <- as.matrix(counts_data)
library(edgeR)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(counts_data)), genes = as.data.frame(row.names(counts_data)))
View(counts_data)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(counts_data)), genes = as.data.frame(row.names(counts_data)))
View(dge_counts)
class(dge_counts)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(counts_data)))
class(dge_counts[2,2])
did not work
which.nonnum <- function(x) {
badNum <- is.na(suppressWarnings(as.numeric(as.character(x))))
which(badNum & !is.na(x))
}
lapply(counts_data, which.nonnum)
class(dge_counts[12,1])
class(dge_counts[13,1])
dge_counts <- as.matrix(counts_data)
mode(dge_counts)<-"integer"
class(dge_counts[4,4])
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(counts_data)))
library(readr)
library(dplyr)
library(tidyverse)
counts_data <- read_tsv('GSE213092_HRCRC.txt')
View(counts_data)
counts_data <- counts_data %>%
column_to_rownames("Gene")
dge_counts <- as.matrix(counts_data)
View(dge_counts)
mode(dge_counts)<-"integer"
dgecounts<-dgecounts[,-1]
dge_counts<-dge_counts[,-1]
library(edgeR)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(counts_data)))
dge_counts <- dge_counts[!rowSums(is.na(dge_counts))]
class(dge_counts)
dge_counts <- as.matrix(counts_data)
mode(dge_counts)<-"integer"
#Remove column with NA values
dge_counts<-dge_counts[,-1]
#Remove rows with NAs
dge_counts <- dge_counts[!rowSums(is.na(dge_counts)),]
library(edgeR)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(counts_data)))
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)))
View(dge)
dge <- calcNormFactors(dge, method = "TMM")
View(dge)
dge$samples
counts_data <- read_tsv('GSE213092_HRCRC_rowsort.txt')
counts_data <- as.data.frame(counts_data)
dge_counts <- as.matrix(counts_data)
mode(dge_counts)<-"integer"
#Remove column with NA values (now we don't have a gene name label, must add later)
dge_counts<-dge_counts[,-1]
#Remove rows with NAs
dge_counts <- dge_counts[!rowSums(is.na(dge_counts)),]
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), groups = as.data.frame(sample_labels.csv$disease_state))
sample_labels.csv$disease_state
sample_labels <- read.csv('sample_labels.csv')
View(sample_labels)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), groups = as.data.frame(sample_labels$disease_state))
sample_labels$disease_state
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), groups = sample_labels$disease_state))
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), groups = sample_labels$disease_state)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), group = sample_labels$disease_state)
View(sample_labels)
sample_labels <- read.csv('sample_labels.csv')
sample_labels <- sample_labels[!rowSums(is.na(sample_labels)),]
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), group = sample_labels$disease_state)
dge <- calcNormFactors(dge, method = "TMM")
View(dge)
dge$samples
design = model.matrix(~group)
design = model.matrix(~group, data=dge)
design <- model.matrix(~sample_labels$disease_state)
dge = estimateDisp(y, design)
dge = estimateDisp(dge, design)
fit = glmQLFit(y, design)
fit = glmQLFit(dge, design)
qlf = glmQLFTest(fit, coef=2)
topTags(qlf)
View(qlf)
head(qlf)
plotQLDisp(fit)
topTags(qlf)
View(qlf)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), genes = counts_data$Gene, group = sample_labels$disease_state)
rownames(counts_data) <- counts_data[,1]
mode(dge_counts[,-1])<-"integer"
dge_counts <- as.matrix(counts_data)
mode(dge_counts[,2]) <-"integer"
class(dge_counts[1,2])
class(dge_counts[2,2])
dge_counts[2,2]
mode(dge_counts) <-"integer"
dge_counts[2,2]
plotQLDisp(fit)
plotQLDisp(fit)
plotQLDisp(fit)
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), genes = counts_data$Gene, group = sample_labels$disease_state)
counts_data <- read_tsv('GSE213092_HRCRC_rowsort.txt')
counts_data <- as.data.frame(counts_data)
#rownames(counts_data) <- counts_data[,1]
# Normalize read counts for every gene with the trimmed mean of M-values (TMM) method using the edgeR package in R
# Convert the counts data into a format that DGEList will accept: convert to matrix
dge_counts <- as.matrix(counts_data)
mode(dge_counts) <-"integer"
#Remove column with NA values (now we don't have a gene name label, must add later)
dge_counts<-dge_counts[,-1]
#Remove rows with NAs
dge_counts <- dge_counts[!rowSums(is.na(dge_counts)),]
# Normalize read counts, creating DGEList object. [[Note: we have to assign these to the groups early and late colon cancer!]]
library(edgeR)
sample_labels <- read.csv('sample_labels.csv')
sample_labels <- sample_labels[!rowSums(is.na(sample_labels)),]
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), genes = counts_data$Gene, group = sample_labels$disease_state)
counts_data <- counts_data[!rowSums(is.na(counts_data)),]
dge_counts <- as.matrix(counts_data)
mode(dge_counts) <-"integer"
#Remove column with NA values (now we don't have a gene name label, must add later)
dge_counts<-dge_counts[,-1]
library(edgeR)
sample_labels <- read.csv('sample_labels.csv')
sample_labels <- sample_labels[!rowSums(is.na(sample_labels)),]
dge <- DGEList(counts=dge_counts, samples = as.data.frame(colnames(dge_counts)), genes = counts_data$Gene, group = sample_labels$disease_state)
dge <- calcNormFactors(dge, method = "TMM")
View(dge)
design <- model.matrix(~sample_labels$disease_state)
# we are using timeName here to make sure that time is treated as a categorical variable. Had we more time points it might make sense to treat time as a value.
dge = estimateDisp(dge, design)
fit = glmQLFit(dge, design)
qlf = glmQLFTest(fit, coef=2)
topTags(qlf)
plotQLDisp(fit)
plotQLDisp(fit)
View(qlf)
head(qlf$samples)
head(qlf$table)
qlf_filtered <- qlf[,which(qlf$table$logCPM > 1)]
qlf_filtered <- qlf[which(qlf$table$logCPM > 1)]
head(qlf$table$logCPM > 1)
View(dge)
dge$samples
head(dge$AveLogCPM)
dge_filtered <- filterByExpr(dge_counts, min.total.count=1)
head(dge_filtered)
dge_filtered <- dge_counts[which(filterByExpr(dge_counts, min.total.count=1))]
design <- model.matrix(~sample_labels$disease_state)
dge = estimateDisp(dge, design)
fit = glmQLFit(dge, design)
qlf = glmQLFTest(fit, coef=2)
topTags(qlf)
topTags(qlf, n=100, adjust.method="BH", sort.by="logFC", p.value=0.01)
dge_fc <- topTags(qlf, n=length(dge_counts), adjust.method="BH", sort.by="logFC", p.value=0.01)
View(dge_fc)
head(dge_fc$table)
View(dge_fc)
dge_fc <- topTags(qlf, n=length(dge_counts), adjust.method="BH", sort.by="logFC", p.value=0.01)$table
View(qlf)
View(fit)
View(qlf)
head(qlf$table)
dge_fc <- data.frame(c(qlf$genes, qlf$table))
View(dge_fc)
dge_fc <- topTags(qlf, n=length(dge_counts), adjust.method="BH", sort.by="logFC", p.value=0.01)$table
View(dge_fc)
dge_fc <- data.frame(c(qlf$genes, qlf$table))
topTags(qlf, n=length(dge_counts), adjust.method="BH", sort.by="logFC", p.value=0.01)
dge_fdr <- p.adjust(qlf$table$PValue, method = p.adjust.methods, n = length(p))
dge_fdr <- p.adjust(qlf$table$PValue, method = p.adjust.methods)
dge_fdr <- p.adjust(qlf$table$PValue, method = "BH")
dge_fdr <- p.adjust(qlf$table$PValue, method = "BH")
dge_fc <- data.frame(c(qlf$genes, qlf$table, dge_fdr))
View(dge_fc)
View(dge_fc)
View(dge_fc)
dge_fc <- data.frame(c(qlf$genes, qlf$table))
View(qlf)
